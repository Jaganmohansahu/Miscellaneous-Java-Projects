package texteditor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.Image;
import java.io.*;
import javax.print.attribute.*;
import java.awt.print.*;
import javax.print.attribute.HashPrintRequestAttributeSet;
import java.util.*;
import java.text.SimpleDateFormat;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.*;
import java.awt.event.KeyEvent;

public class textEditorGui extends javax.swing.JFrame implements Printable, KeyListener{
    
    String filename, content, path = "", msg = "";
    Clipboard clipboard = getToolkit().getSystemClipboard();
    static textEditorGui obj;
    static Image img;
    
    public textEditorGui() {
        this.setIconImage(new ImageIcon(getClass().getResource("IIITlogo.png")).getImage());
        font_chooser fc = new font_chooser(this);
        initComponents();      
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        PageSetup = new javax.swing.JMenuItem();
        Print = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Undo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        Cut = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        Delete = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        Find = new javax.swing.JMenuItem();
        FindNext = new javax.swing.JMenuItem();
        Replace = new javax.swing.JMenuItem();
        GoTo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        SelectAll = new javax.swing.JMenuItem();
        TimeDate = new javax.swing.JMenuItem();
        Format = new javax.swing.JMenu();
        WordWrap = new javax.swing.JMenuItem();
        Font = new javax.swing.JMenuItem();
        View = new javax.swing.JMenu();
        StatusBar = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        ViewHelp = new javax.swing.JMenuItem();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setSelectedTextColor(new java.awt.Color(255, 51, 102));

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTextField1.getAccessibleContext().setAccessibleParent(StatusBar);

        File.setText("File");

        New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        File.add(New);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open...");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        SaveAs.setText("Save As...");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        File.add(SaveAs);
        File.add(jSeparator1);

        PageSetup.setText("PageSetup...");
        PageSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PageSetupActionPerformed(evt);
            }
        });
        File.add(PageSetup);

        Print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        Print.setText("Print...");
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });
        File.add(Print);
        File.add(jSeparator2);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText("EXIT");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Edit.setText("Edit");

        Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        Undo.setText("Undo");
        Edit.add(Undo);
        Edit.add(jSeparator3);

        Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        Edit.add(Cut);

        Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        Edit.add(Copy);

        Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        Edit.add(Paste);

        Delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        Edit.add(Delete);
        Edit.add(jSeparator4);

        Find.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        Find.setText("Find...");
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindActionPerformed(evt);
            }
        });
        Edit.add(Find);

        FindNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        FindNext.setText("Find Next");
        FindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindNextActionPerformed(evt);
            }
        });
        Edit.add(FindNext);

        Replace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        Replace.setText("Replace...");
        Replace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplaceActionPerformed(evt);
            }
        });
        Edit.add(Replace);

        GoTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        GoTo.setText("Go To...");
        Edit.add(GoTo);
        Edit.add(jSeparator5);

        SelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        SelectAll.setText("Select All");
        SelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAllActionPerformed(evt);
            }
        });
        Edit.add(SelectAll);

        TimeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        TimeDate.setText("Time/Date");
        TimeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeDateActionPerformed(evt);
            }
        });
        Edit.add(TimeDate);

        jMenuBar1.add(Edit);

        Format.setText("Format");

        WordWrap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.ALT_MASK));
        WordWrap.setText("Word Wrap");
        WordWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WordWrapActionPerformed(evt);
            }
        });
        Format.add(WordWrap);

        Font.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        Font.setText("Font...");
        Font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontActionPerformed(evt);
            }
        });
        Format.add(Font);

        jMenuBar1.add(Format);

        View.setText("View");

        StatusBar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        StatusBar.setText("Status Bar");
        StatusBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        StatusBar.setSelected(true);
        StatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusBarActionPerformed(evt);
            }
        });
        View.add(StatusBar);

        jMenuBar1.add(View);

        Help.setText("Help");

        ViewHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        ViewHelp.setText("View Help");
        Help.add(ViewHelp);

        About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        About.setText("About Notepad");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void keyPressed(KeyEvent ke)
    {
        //get the code of the key pressed
        int keycode = ke.getKeyCode();
        
        //get the name of the key from the code
        String keyname = ke.getKeyText(keycode);
        msg += "\nKey Pressed: " + keyname;
        
        //display the keycode and key name in the textfield
        jTextField1.setText(msg);
        msg="";
    }
    public void keyTyped(KeyEvent ke)
    {}
    public void keyReleased(KeyEvent ke)
    {
        //get the keycode released
        int keycode = ke.getKeyCode();
        msg += "\nKey Code: " + keycode;
        
        //get the key name from the code
        String keyname = ke.getKeyText(keycode);
        msg += "\nKey Released: " + keyname;
        
        //display the cod enad key name in the text field
        jTextField1.setText(msg);
        msg = "";
    }
    private void FindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindNextActionPerformed
        
         if (evt.getSource() == FindNext) {
            edit_find_next();
        }
    }//GEN-LAST:event_FindNextActionPerformed
   
    public void edit_find_next() {
        find finder = new find(this);
        finder.find_next();
    }

    public void edit_find() {
        find finder = new find(this);
        finder.setVisible(true);
    }
    private void SelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SelectAllActionPerformed

    private void TimeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeDateActionPerformed
        
         try {
            int start = textArea.getSelectionStart();
            int end = textArea.getSelectionEnd();
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyy h:m a");
            String now = sdf.format(cal.getTime());
            String temp1 = textArea.getText().substring(0, start);
            String temp2 = textArea.getText().substring(end);
            textArea.setText(temp1 + "" + now + "" + temp2);
            textArea.select(start + 1, start + 1 + now.length());
        } catch (NullPointerException e) {
    }                             
    }//GEN-LAST:event_TimeDateActionPerformed

    private void FindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindActionPerformed
        
         if (evt.getSource() == Find) {
            edit_find();
        }
    }//GEN-LAST:event_FindActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        
        file_saveAs();
    }//GEN-LAST:event_SaveAsActionPerformed

    private void PageSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PageSetupActionPerformed
        
         PrinterJob job = PrinterJob.getPrinterJob();
        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
        PageFormat pf = job.pageDialog(aset);
        job.setPrintable(obj, pf);
        boolean ok = job.printDialog(aset);
        if (ok) {
            try {
                job.print(aset);
            } catch (PrinterException ex) {
                /* The job did not successfully complete */
            }
        }
    }                                         
    public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
        if (page > 0) {
            /*We have only one page, and 'page' is zero-based*/
            return NO_SUCH_PAGE;
        }
        /* User(0, 0) is typically outside the imageable area,
		 so we must translate by X and Y values in the PageFormat to avoid clipping */
        Graphics2D g2d = (Graphics2D) g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());

        /* Now we perform our rendering */
        g.drawString(textArea.getText(), 100, 100);

        /* tell the caller that this page is part of the printed document */
        return PAGE_EXISTS;
    }

    public void file_print() {
        PrinterJob printer = PrinterJob.getPrinterJob();
        printer.setPrintable(this);
        HashPrintRequestAttributeSet printAttr = new HashPrintRequestAttributeSet();
        printer.setPrintable(obj);
        if (printer.printDialog(printAttr)) {
            try {
                printer.print(printAttr);
            } catch (PrinterException e) {
                JOptionPane.showMessageDialog(this, "Failed to print the file: " + e, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_PageSetupActionPerformed

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
        
        file_print();
    }//GEN-LAST:event_PrintActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        
         if (textArea.getText().equals(content)) {
            textArea.setText("");
            path = "";
            System.exit(0);
        } else if (textArea.getText().equals("") && content == null) {
            textArea.setText("");
            path = "";
            System.exit(0);
        } else {
            int a = JOptionPane.showConfirmDialog(null, "The text has been changed\n Do you want to save the changes?");
            if (a == 0) {
                file_Save();
            } else if (a == 1) {
                textArea.setText("");
                path = "";
                setTitle("Untitled - Notepad");
            } else if (a == 2) {
                return;
            }
        }
    }//GEN-LAST:event_ExitActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        
         JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int r = fc.showOpenDialog(this);
        if (r == fc.CANCEL_OPTION) {
            return;
        }

        File myfile = fc.getSelectedFile();

        if (myfile == null || myfile.getName().equals("")) {
            JOptionPane.showMessageDialog(this, "Select a file!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            BufferedReader input = new BufferedReader(new FileReader(myfile));
            StringBuffer str = new StringBuffer();
            String line;
            while ((line = input.readLine()) != null) {
                str.append(line + "\n");
            }
            textArea.setText(str.toString());
            content = textArea.getText();
            path = myfile.toString();
            setTitle(myfile.getName() + " - Notepad");
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "File not found: " + e);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "IO ERROR: " + e);
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
        
          String cutString = textArea.getSelectedText();
        StringSelection cutSelection = new StringSelection(cutString);
        clipboard.setContents(cutSelection, cutSelection);
        textArea.replaceRange("", textArea.getSelectionStart(), textArea.getSelectionEnd());
    }//GEN-LAST:event_CutActionPerformed

    private void ReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplaceActionPerformed
        
         if (evt.getSource() == Replace) {
            edit_replace();
        }
    }                                       
    public void edit_replace() {
        find finder = new find(this);
        finder.setVisible(true);
    }//GEN-LAST:event_ReplaceActionPerformed

    private void FontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontActionPerformed
        
         if (evt.getSource() == Font) {
            format_font();
        }
    }                                    
    public void format_font() {
        font_chooser fc = new font_chooser(this);
        fc.window.setVisible(true);
    }//GEN-LAST:event_FontActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        
         if (textArea.getText().equals("") || textArea.getText().equals(content)) {
            textArea.setText("");
            content = "";

            path = "";

            setTitle("Untitled - Notepad");
        } else {
            int a = JOptionPane.showConfirmDialog(null, "The text has been changed\n Do you want to save the changes?");
            if (a == 0) {
                file_Save();
            } else if (a == 1) {
                textArea.setText("");
                path = "";
                setTitle("Untitled - Notepad");
            } else if (a == 2) {
                return;
            }
        }
    }//GEN-LAST:event_NewActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        
           file_Save();
    }                                    
    void file_Save() {
        if (path.equals("")) {
            file_saveAs();
            return;
        }
        try {
            FileWriter fw = new FileWriter(path);

            fw.write(textArea.getText());
            content = textArea.getText();

            fw.close();
        } catch (IOException i) {
            JOptionPane.showMessageDialog(this, "Failed to save the file", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
        
         try {
            Transferable pasteText = clipboard.getContents(textEditorGui.this);
            String sel = (String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceRange(sel, textArea.getSelectionStart(), textArea.getSelectionEnd());
        } catch (Exception e) {
            System.out.println("An Error Occured");
        }
    }//GEN-LAST:event_PasteActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        
         String copyText = textArea.getSelectedText();
        StringSelection copySelection = new StringSelection(copyText);
        clipboard.setContents(copySelection, copySelection);               
    }//GEN-LAST:event_CopyActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        
         String temp = textArea.getText();
        textArea.setText(temp.substring(0, textArea.getSelectionStart()) + temp.substring(textArea.getSelectionEnd()));
    }//GEN-LAST:event_DeleteActionPerformed

    private void WordWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WordWrapActionPerformed
        
         if (textArea.getLineWrap() == false) {
            textArea.setLineWrap(true);
        } else {
            textArea.setLineWrap(false);
        }
    }//GEN-LAST:event_WordWrapActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        
         if (evt.getSource() == About) {
            help_about();
        }
    }//GEN-LAST:event_AboutActionPerformed

    private void StatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusBarActionPerformed
        boolean b = StatusBar.isSelected();
        
        if(b==false)
        {
            jTextField1.setVisible(false);
        }
        else
            jTextField1.setVisible(true);
    }//GEN-LAST:event_StatusBarActionPerformed
    
    public void help_about() {
        about abt = new about(this);
        abt.window.setVisible(true);
    }
    /*
    private void FindActionPerformed(java.awt.event.ActionEvent evt) {                                     

        if (evt.getSource() == Find) {
            edit_find();
        }
    }                      
   */
    void file_saveAs() {
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int r = fc.showSaveDialog(this);
        if (r == JFileChooser.CANCEL_OPTION) {
            return;
        }

        File myfile = fc.getSelectedFile();
        System.out.println(myfile);

        if (myfile == null || myfile.getName().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a file name!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (myfile.exists()) {
            r = JOptionPane.showConfirmDialog(this, "A file with same name already exists!\n Are you sure want to overwrite?");
            if (r != 0) {
                return;
            }
        }
        try {
            FileWriter fw = new FileWriter(myfile);

            fw.write(textArea.getText());
            content = textArea.getText();
            setTitle(myfile.getName() + " - Notepad");
            fw.close();
        } catch (IOException i) {
            JOptionPane.showMessageDialog(this, "Failed to save the file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
       
    public static void main(String args[]) {
       

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new textEditorGui().setVisible(true);
            }
        });
    }
    {
/*
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Find;
    private javax.swing.JMenuItem FindNext;
    private javax.swing.JMenuItem Font;
    private javax.swing.JMenu Format;
    private javax.swing.JMenuItem GoTo;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem PageSetup;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Print;
    private javax.swing.JMenuItem Replace;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JMenuItem SelectAll;
    private javax.swing.JMenuItem StatusBar;
    private javax.swing.JMenuItem TimeDate;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JMenu View;
    private javax.swing.JMenuItem ViewHelp;
    private javax.swing.JMenuItem WordWrap;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
*/
     // Variables declaration - do not modify   
    }
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Find;
    private javax.swing.JMenuItem FindNext;
    private javax.swing.JMenuItem Font;
    private javax.swing.JMenu Format;
    private javax.swing.JMenuItem GoTo;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem PageSetup;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Print;
    private javax.swing.JMenuItem Replace;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JMenuItem SelectAll;
    private javax.swing.JMenuItem StatusBar;
    private javax.swing.JMenuItem TimeDate;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JMenu View;
    private javax.swing.JMenuItem ViewHelp;
    private javax.swing.JMenuItem WordWrap;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JTextArea textArea;
    // End of variables declaration   
}
